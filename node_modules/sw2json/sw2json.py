# --coding:gbk--

import os
import os.path
import shapefile
import struct
import datetime
import decimal
import itertools
import json


rootdir = "/Users/lishiguang/Documents/data/liuzhou/"

def dbfreader(f):
    """Returns an iterator over records in a Xbase DBF file.

    The first row returned contains the field names.
    The second row contains field specs: (type, size, decimal places).
    Subsequent rows contain the data records.
    If a record is marked as deleted, it is skipped.

    File should be opened for binary reads.

    """
    # See DBF format spec at:
    #     http://www.pgts.com.au/download/public/xbase.htm#DBF_STRUCT

    numrec, lenheader = struct.unpack('<xxxxLH22x', f.read(32))
    numfields = (lenheader - 33) // 32

    fields = []
    for fieldno in xrange(numfields):
        name, typ, size, deci = struct.unpack('<11sc4xBB14x', f.read(32))
        name = name.replace('\0', '')  # eliminate NULs from string
        fields.append((name, typ, size, deci))
    yield [field[0] for field in fields]
    yield [tuple(field[1:]) for field in fields]

    terminator = f.read(1)
    assert terminator == '\r'

    fields.insert(0, ('DeletionFlag', 'C', 1, 0))
    fmt = ''.join(['%ds' % fieldinfo[2] for fieldinfo in fields])
    fmtsiz = struct.calcsize(fmt)
    for i in xrange(numrec):
        record = struct.unpack(fmt, f.read(fmtsiz))
        if record[0] != ' ':
            continue  # deleted record
        result = []
        for (name, typ, size, deci), value in itertools.izip(fields, record):
            if name == 'DeletionFlag':
                continue
            if typ == "N":
                value = value.replace('\0', '').lstrip()
                if value == '':
                    value = 0
                elif deci:
                    value = decimal.Decimal(value)
                else:
                    value = int(value)
            elif typ == 'D':
                y, m, d = int(value[:4]), int(value[4:6]), int(value[6:8])
                value = datetime.date(y, m, d)
            elif typ == 'L':
                value = (value in 'YyTt' and 'T') or (value in 'NnFf' and 'F') or '?'
            elif typ == 'F':
                value = float(value)
            result.append(value)
        yield result

poiPath = rootdir + os.path.sep + "index" + os.path.sep + "POI.shp"
poi = shapefile.Reader(poiPath)
records = poi.records()
poiId2poiInfo = {}
featid2name = {}

for record in records:
    poiId = record[7].strip()
    x = record[5].strip()
    y = record[6].strip()
    adcode = record[4].strip()
    poiId2poiInfo[poiId] = (x, y, adcode)

pnamePath = rootdir + os.path.sep + "other" + os.path.sep + "PName.dbf"
with open(pnamePath, 'rb') as fPName:
    db = list(dbfreader(fPName))
    i = 0
    for record in db:
        if i<2:
            i+=1
            continue
        featid = record[0].strip()
        language = record[8].strip()
        name = record[2].strip().decode('gbk').encode('utf8')
        featid2name[(featid, language)] = name

result = ""
for poiId in poiId2poiInfo.keys():
    x = poiId2poiInfo[poiId][0]
    y = poiId2poiInfo[poiId][1]
    adcode = poiId2poiInfo[poiId][2]
    chnName = featid2name[(poiId, "1")].decode('utf-8')
    pinyin = featid2name[(poiId, "3")].replace("&", "&amp;")

    tags = {}
    tags["amenity"] = "theatre"
    tags["name"] = chnName
    tags["name:zh"] = chnName

    record = {}
    record["id"] = poiId
    record["type"] = "node"
    record["lat"] = y
    record["lon"] = x
    record["tags"] = tags

    strRecord = json.dumps(record, ensure_ascii=False  ) + "\n"
    result += strRecord

print result.encode('utf8')
